<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.portale.mapper.StoreMapper">

	<!-- Seleziona il numero di negozi Indicando l'id del utente ritorna il numori di negozi appartenente a quel utente -->
	<select id="GetStoresCount" resultType="java.lang.Long">
		select distinct count(*) over ()
		from store
		left join users_details ud
		on
		store.store_owner =
		ud.ud_user_ref
		<if test="search != null">
			where (store_name ilike #{search}
			or ud_nome ilike #{search}
			or ud_cognome
			ilike #{search}
			or store_tags ilike #{search})
			<if test="store_owner != 0">and store.store_owner = #{store_owner} or
				store.store_owner = 3
			</if>
		</if>
		<if test="store_owner != 0">where store.store_owner = #{store_owner} or
			store.store_owner = 3
		</if>
	</select>





	<!-- Seleziona il numero di oggetti che si trovano dentro uno storage -->
	<select id="GetStorageItemsCount" resultType="java.lang.Long">
		select distinct
		count(item_id) from storage_items
		where storage_ref =
		#{storageId}
		<if test="search != null">
			and (item_name ilike CONCAT('%',#{search},'%')
			or item_description ilike CONCAT('%',#{search},'%')
			or
			category ilike CONCAT('%',#{search},'%'))
		</if>
	</select>

	<select id="GetPublicStorageItemsCount" resultType="java.lang.Long">
		select
		count(item_id) from storage_items
		where storage_ref =
		#{storageId}

	</select>

	<!-- Verifica se il negozio e' stato confermato -->
	<select id="isStoreConfirmed" resultType="java.lang.Boolean">
		select s.confirmed
		from
		store s
		where s.store_id = #{storeId}
	</select>

	<!-- Seleziona il nome di tutte le categorie dei negozi (ESEMPIO: Negozio che vende vestiti >> Abbigliamento) -->
	<select id="GetStoreCategoriesList" resultType="string">
		select distinct
		s.store_tags from store s where store_tags is not NULL
	</select>
	
	<select id="GetCategoryCategoriesList" resultType="string">
		select distinct
		s.store_tags from store s where store_tags is not NULL
	</select>
	
	<select id="GetProductCategoriesList" resultType="string">
		select distinct
		i.item_tags from storage_items i where item_tags is not NULL
	</select>

	<!-- Seleziona ogni tema -->
	<select id="GetThemesData" resultMap="StoreThemesResultMap">
		select * from theme
		order
		by theme_id
	</select>

	<!-- seleziona i negozi confermati che hanno almeno un prodotto e (senza data di scadenza o con la data di scadenza valida) -->
	<select id="GetStoreData" resultMap="StoreObjectResultMap">
		select distinct st.store_id,
		st.store_tags, st.store_name,
		strg.storage_id, m.media_id, m.media_name, m.media_owner, CONCAT(m.media_path, m.media_extension) as media_path, m.media_pubblication_date
		,st.store_place,
		st.store_place_expire
		from store
		st
		left
		join
		(
		select
		distinct
		on
		(storage.storage_id)
		* from storage,
		store
		where
		storage.storage_store_ref =
		store.store_id
		and store.store_depth
		= 0
		) as strg
		on strg.storage_store_ref =
		st.store_id
		left join media m
		on m.media_id =
		st.store_media
		join (select
		storage.storage_store_ref,
		count(storage_items.item_id) from storage,
		storage_items
		where
		storage_items.item_storage_ref = storage.storage_id

		GROUP BY storage.storage_id,
		storage_items.item_id
		HAVING
		storage_items.item_id > 1 ) as
		storage_having_prod
		on
		storage_having_prod.storage_store_ref =
		st.store_id
		where
		st.store_open
		= true
		and
		st.store_confirmed = true
		and
		(st.store_valid_until is null or
		st.store_valid_until >
		current_date)
		and
		storage_having_prod.storage_store_ref =
		st.store_id
		order by
		store_place, st.store_id desc
	</select>

	<!-- seleziona un prodotto a caso dal negozio tuttocitta (scegle i prodotti che hanno inpostato l'immagine preferita) -->
	<!-- TODO si deve modificare la chiamata, invece di un'immagine deve tornare la lista -->
	<select id="GetRandomItemTC" resultMap="RandomItemTCResultMap">
		select distinct RANDOM(),
		m.*, si.item_id, si.storage_ref from media m,
		store s, storage_items
		si
		where m.media_id =
		si.preview_media
		<!-- and (si.storage_ref != 65) and (si.storage_ref != 8) and si.avability = true -->
		and si.quantity > 0 or
		si.quantity is null

		and si.storage_ref =
		s.store_id
		and s.store_id = 3

		ORDER BY RANDOM ()
		LIMIT 1
	</select>

	<resultMap type="ItemAds" id="RandomItemTCResultMap">
		<id property="item_id" column="item_id" />
		<result property="storage_ref" column="storage_ref" />
		<association property="item_media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
	</resultMap>

	<select id="GetStorageItems" resultMap="StorageItemsResultMap">
		select store_dett.store_name, store_dett.store_items_type, store_dett.item_type_desc, s_it.*, st.*,

		item_pref.media_id as item_media_id,
		item_pref.media_name as item_media_name,
		(CASE WHEN item_pref.media_hasthumbnail = true THEN
		CONCAT(item_pref.media_path, '_thumb',item_pref.media_extension)
		ELSE
		CONCAT(item_pref.media_path, item_pref.media_extension)
		END)
		as item_media_path,
		item_pref.media_owner as item_media_owner,
		item_pref.media_pubblication_date as item_media_pubblication_date,

		strg_media.media_id as storage_media_id,
		strg_media.media_name as
		storage_media_name,
		(CASE WHEN strg_media.media_hasthumbnail = true THEN
		CONCAT(strg_media.media_path, '_thumb',strg_media.media_extension)
		ELSE
		CONCAT(strg_media.media_path, strg_media.media_extension)
		END) as storage_media_path,
		strg_media.media_owner as storage_media_owner,
		strg_media.media_pubblication_date as
		storage_media_pubblication_date

		from storage_items s_it
		left join
		storage st
		on s_it.item_storage_ref =
		st.storage_id

		LEFT JOIN media strg_media
		ON
		strg_media.media_id =
		st.storage_media

		left join (select ml.link_reference,
		max(ml.link_media) as link_media from
		storage_items si, media_linked ml
		where si.item_id = ml.link_reference group
		by link_reference)as ml
		on
		ml.link_reference = s_it.item_id

		left join
		media
		item_pref
		on (CASE
		WHEN
		s_it.item_preview_media IS NOT NULL THEN
		item_pref.media_id =
		s_it.item_preview_media
		WHEN s_it.item_preview_media IS NULL THEN
		item_pref.media_id = ml.link_media
		END)
		inner join (select item_type.item_type_desc, store.store_name, store.store_id, store.store_items_type from store, item_type where store.store_items_type = item_type.item_type_id) store_dett
		on store_dett.store_id = st.storage_store_ref
		where
		st.storage_id =
		#{storageId}
		<if test="search != null">
			and (s_it.item_name ilike CONCAT('%',#{search},'%)
			or s_it.item_description ilike
			CONCAT('%',#{search},'%)
			or s_it.item_tags ilike CONCAT('%',#{search},'%))
		</if>
		order by s_it.item_id desc
		limit
		#{limit}
		offset
		#{offset}
	</select>

	<select id="GetStoreProductsManager" resultMap="StorageItemsResultMap">
		select us.store_name, us.store_items_type, it.item_type_desc, s_it.*, st.*,
		item_pref.media_id as item_media_id,
		item_pref.media_name as
		item_media_name,
		(CASE WHEN item_pref.media_hasthumbnail = true THEN
		CONCAT(item_pref.media_path, '_thumb',item_pref.media_extension)
		ELSE
		CONCAT(item_pref.media_path, item_pref.media_extension)
		END)
		as item_media_path,
		item_pref.media_owner as item_media_owner,
		item_pref.media_pubblication_date as
		item_media_pubblication_date,

		strg_media.media_id as storage_media_id,
		strg_media.media_name as
		storage_media_name,
		(CASE WHEN strg_media.media_hasthumbnail = true THEN
		CONCAT(strg_media.media_path, '_thumb',strg_media.media_extension)
		ELSE
		CONCAT(strg_media.media_path, strg_media.media_extension)
		END) as storage_media_path,
		strg_media.media_owner as storage_media_owner,
		strg_media.media_pubblication_date as storage_media_pubblication_date

		from item_type it, store
		us, storage_items s_it
		left join
		storage st
		on
		s_it.item_storage_ref =
		st.storage_id

		LEFT JOIN media strg_media
		ON
		strg_media.media_id =
		st.storage_media

		left join
		(select
		ml.link_reference, max(ml.link_media) as link_media from storage_items
		si, media_linked ml where si.item_id = ml.link_reference group by
		link_reference)as ml
		on ml.link_reference = s_it.item_id

		left join media
		item_pref
		on (CASE
		WHEN
		s_it.item_preview_media IS NOT NULL THEN
		item_pref.media_id =
		s_it.item_preview_media
		WHEN s_it.item_preview_media IS NULL
		THEN
		item_pref.media_id = ml.link_media
		END)
		where st.storage_store_ref = us.store_id
		and it.item_type_id = us.store_items_type
		and us.store_id =
		#{storeId}
		order by item_id desc,
		storage_id desc
		limit #{limit}
		offset
		#{offset}
		
	</select>

	<select id="GetStoreWithProducts" resultMap="StoreWithProductsResultMap">
		select s_m.media_id, s_m.media_name, 
		(CASE WHEN s_m.media_hasthumbnail = true THEN
		CONCAT(s_m.media_path, '_thumb',s_m.media_extension)
		ELSE
		CONCAT(s_m.media_path, s_m.media_extension)
		END) as media_path,
		s_m.media_owner,
		s_m.media_pubblication_date,
		us.*, s.*, i.*,
		st_m.media_id as
		storage_media_id,
		st_m.media_name as
		storage_media_name,
		(CASE WHEN st_m.media_hasthumbnail = true THEN
		CONCAT(st_m.media_path, '_thumb',st_m.media_extension)
		ELSE
		CONCAT(st_m.media_path, st_m.media_extension)
		END) as storage_media_path,
		st_m.media_owner as storage_media_owner,
		st_m.media_pubblication_date
		as
		storage_media_pubblication_date,
		i_m.media_id as
		item_media_id,
		i_m.media_name as item_media_name,
		(CASE WHEN i_m.media_hasthumbnail = true THEN
		CONCAT(i_m.media_path, '_thumb',i_m.media_extension)
		ELSE
		CONCAT(i_m.media_path, i_m.media_extension)
		END) as item_media_path,
		i_m.media_owner as
		item_media_owner,
		i_m.media_pubblication_date as
		item_media_pubblication_date
		from store
		us
		left join storage s
		on
		s.storage_store_ref = us.store_id
		left join
		storage_items i
		on i.item_storage_ref =
		s.storage_id
		left
		join
		media s_m
		on
		s_m.media_id = us.store_media
		left
		join
		media st_m
		on st_m.media_id =
		s.storage_media
		left join
		media_linked
		ml
		on i.item_id =
		ml.link_reference
		left join
		media i_m
		on i_m.media_id =
		ml.link_media
		where us.store_id =
		#{storeId}
		<!-- and (i.quantity != 0) and i.avability = true -->
		order by
		storage_id
	</select>

	<select id="GetStorageeWithProducts" resultMap="StoreWithProductsResultMap">
		select s_m.media_id, s_m.media_name, 
		(CASE WHEN s_m.media_hasthumbnail = true THEN
		CONCAT(s_m.media_path, '_thumb',s_m.media_extension)
		ELSE
		CONCAT(s_m.media_path, s_m.media_extension)
		END) as media_path,
		s_m.media_owner,
		s_m.media_pubblication_date, us.*, s.*, i.*,
		st_m.media_id as
		storage_media_id,
		st_m.media_name as
		storage_media_name,
		(CASE WHEN st_m.media_hasthumbnail = true THEN
		CONCAT(st_m.media_path, '_thumb',st_m.media_extension)
		ELSE
		CONCAT(st_m.media_path, st_m.media_extension)
		END) as storage_media_path,
		st_m.media_owner as storage_media_owner,
		st_m.media_pubblication_date
		as
		storage_media_pubblication_date,
		item_pref.media_id as
		item_media_id,
		item_pref.media_name as
		item_media_name,
		(CASE WHEN item_pref.media_hasthumbnail = true THEN
		CONCAT(item_pref.media_path, '_thumb',item_pref.media_extension)
		ELSE
		CONCAT(item_pref.media_path, item_pref.media_extension)
		END) as item_media_path,
		item_pref.media_owner as
		item_media_owner,
		item_pref.media_pubblication_date as
		item_media_pubblication_date
		from
		store us
		left join storage s
		on
		s.storage_store_ref = us.store_id
		left join
		storage_items i
		on i.item_storage_ref =
		s.storage_id
		left join
		media s_m
		on
		s_m.media_id = us.store_media
		left
		join
		media st_m
		on st_m.media_id =
		s.storage_media

		left join (select
		ml.link_reference, max(ml.link_media)
		as link_media from storage_items si, media_linked ml where
		si.item_id =
		ml.link_reference group
		by
		link_reference)as ml
		on ml.link_reference =
		i.item_id

		left join media item_pref
		on (CASE
		WHEN
		i.item_preview_media IS
		NOT
		NULL THEN
		item_pref.media_id =
		i.item_preview_media
		WHEN i.item_preview_media IS
		NULL THEN
		item_pref.media_id = ml.link_media
		END)

		where us.store_id =
		s.storage_store_ref
		and
		s.storage_id =
		#{storageId}
		<!-- and (i.quantity != 0) and i.avability = true -->
		order by
		item_id
		desc
		limit #{limit}
		offset #{offset}
	</select>

	<select id="GetStorageeWithAllProducts" resultMap="StoreWithProductsResultMap">
		select s_m.media_id, s_m.media_name, 
		(CASE WHEN s_m.media_hasthumbnail = true THEN
		CONCAT(s_m.media_path, '_thumb',s_m.media_extension)
		ELSE
		CONCAT(s_m.media_path, s_m.media_extension)
		END) as media_path,
		s_m.media_owner,
		s_m.media_pubblication_date,
		us.*, s.*, i.*,
		st_m.media_id as
		storage_media_id,
		st_m.media_name as
		storage_media_name,
		(CASE WHEN st_m.media_hasthumbnail = true THEN
		CONCAT(st_m.media_path, '_thumb',st_m.media_extension)
		ELSE
		CONCAT(st_m.media_path, st_m.media_extension)
		END) as storage_media_path,
		st_m.media_owner as storage_media_owner,
		st_m.media_pubblication_date
		as
		storage_media_pubblication_date,
		item_pref.media_id as
		item_media_id,
		item_pref.media_name as
		item_media_name,
		(CASE WHEN item_pref.media_hasthumbnail = true THEN
		CONCAT(item_pref.media_path, '_thumb',item_pref.media_extension)
		ELSE
		CONCAT(item_pref.media_path, item_pref.media_extension)
		END) as item_media_path,
		item_pref.media_owner as
		item_media_owner,
		item_pref.media_pubblication_date as
		item_media_pubblication_date
		from
		store us
		left join storage s
		on
		s.storage_store_ref = us.store_id
		left join
		storage_items i
		on i.item_storage_ref =
		s.storage_id
		left join
		media s_m
		on
		s_m.media_id = us.store_media
		left
		join
		media st_m
		on st_m.media_id =
		s.storage_media

		left join (select
		ml.link_reference, ml.link_media as
		link_media from storage_items si, media_linked ml where
		si.item_id =
		ml.link_reference)as ml
		on ml.link_reference =
		i.item_id

		left join media
		item_pref
		on item_pref.media_id = ml.link_media


		where us.store_id =
		s.storage_store_ref
		and
		s.storage_id =
		#{storageId}
		<!-- and (i.quantity != 0) and i.avability = true -->
	</select>

	<select id="GetStoreProductinfo" resultMap="ItemsResultMap">
		select i.*,
		s.storage_name,
		m.media_id as
		item_media_id,
		m.media_name as
		item_media_name,
		CONCAT(m.media_path, m.media_extension) as item_media_path,
		m.media_owner as
		item_media_owner,
		m.media_pubblication_date as
		item_pubblication_date

		from store us
		left join
		storage s
		on s.storage_store_ref =
		us.store_id
		left join
		storage_items i
		on
		i.item_storage_ref = s.storage_id
		left join
		media_linked ml
		on ml.link_reference = i.item_id
		left join
		media m
		on m.media_id =
		ml.link_media

		where
		s.storage_store_ref = us.store_id
		and i.item_id =
		#{product_id}
	</select>

	<select id="GetStorageInfo" resultMap="StorageResultMap">
		select * from
		theme,
		storage
		left join (select media_id, media_name, CONCAT(media_path,media_extension) as media_path, media_owner, media_pubblication_date from media) media
		on media.media_id = storage.storage_media
		where
		theme_id =
		storage_theme

		and storage_id = #{storageId}
	</select>

	<select id="GetStoreDataManager" resultMap="StoreManagerObjectResultMap">
		select distinct s.*, m.*, ud.ud_nome, ud.ud_cognome, item_type.item_type_desc
		from store s
		left join
		(select media_id, media_name, 
		 (CASE WHEN media_hasthumbnail = true THEN
		CONCAT(media_path, '_thumb', media_extension)
		ELSE
		CONCAT(media_path, media_extension)
		END) as media_path, media_owner, media_pubblication_date from media) m
		on m.media_id = s.store_media
		left join users_details ud
		on
		s.store_owner =
		ud.ud_user_ref
		left join item_type on store_items_type = item_type_id
		where (1=1)
		<if test="search != null">
			and (store_name ilike CONCAT('%',#{search},'%')
			or ud_nome ilike CONCAT('%',#{search},'%')
			or ud_cognome ilike CONCAT('%',#{search},'%')
			or store_tags ilike CONCAT('%',#{search},'%'))
		</if>
		<choose>
			<when test="selfquery == true">
				and s.store_owner = #{store_owner}
			</when>
			<otherwise>
				and s.store_owner != #{store_owner}
			</otherwise>
		</choose>
		order by store_id
		limit #{limit}
		offset
		#{offset}
	</select>
	
	<select id="GetStoreDataManager_Count" resultType="int">
		select count(store_id)
		from store s
		left join users_details ud
		on s.store_owner = ud.ud_user_ref
		where (1=1)
		<if test="search != null">
			and (store_name ilike CONCAT('%',#{search},'%')
			or ud_nome ilike CONCAT('%',#{search},'%')
			or ud_cognome ilike CONCAT('%',#{search},'%')
			or store_tags ilike CONCAT('%',#{search},'%'))
		</if>
		<choose>
			<when test="selfquery == true">
				and s.store_owner = #{store_owner}
			</when>
			<otherwise>
				and s.store_owner != #{store_owner}
			</otherwise>
		</choose>
	</select>

	<select id="GetStoreInfo" resultMap="StoreInfoResultMap">
		select s.*,
m.media_id, m.media_name, 
		CONCAT(m.media_path, m.media_extension) as media_path,
		m.media_owner,
		m.media_pubblication_date,
t.* , it.item_type_desc,
		ud.ud_nome, ud.ud_cognome, st.*,
		storage_t.theme_id as storage_themeId,
		storage_t.theme_display_name as storage_themeName,
		storage_t.theme_thumbnail_path
		as storage_themePreviewImage,
		sm.media_id as storage_media_id,
		sm.media_name as
		storage_media_name,
		(CASE WHEN sm.media_hasthumbnail = true THEN
		CONCAT(sm.media_path, '_thumb',sm.media_extension)
		ELSE
		CONCAT(sm.media_path, sm.media_extension)
		END) as storage_media_path,
		sm.media_owner as storage_media_owner,
		sm.media_pubblication_date as
		storage_media_pubblication_date
		from
		item_type it,
		users_details
		ud,
		theme t
		left join
		store
		s
		on
		s.store_theme =
		t.theme_id
		left join
		storage st
		on
		st.storage_store_ref = s.store_id
		left
		join theme storage_t
		on
		storage_t.theme_id = st.storage_theme
		left join
		media m
		on m.media_id =
		s.store_media
		left join media sm
		on st.storage_media =
		sm.media_id
		where
		ud.ud_user_ref =
		s.store_owner
		and it.item_type_id = s.store_items_type
		and
		s.store_id =
		#{store_id}
	</select>

	<insert id="AddNewStore" parameterType="com.portale.model.StoreObject" useGeneratedKeys="true" keyProperty="store.store_id">
		insert into store(store_media,
		store_open, store_tags,
		store_creation_date,
		store_valid_until, store_name, store_owner, store_theme, store_confirmed, store_depth, store_items_type)
		values
		(#{media_id}, #{open}, #{category}, #{creation},
		#{valid_until},
		#{store_name},
		#{store_owner}, #{themeId},
		#{confirmed},
		#{store_depth}, #{items_type})
	</insert>

	<insert id="AddStoreStorage" parameterType="com.portale.model.StorageObject" useGeneratedKeys="true" keyProperty="storage.storage_id">
		insert into
		storage(storage_name,
		storage_store_ref, storage_theme, storage_media)
		values
		(#{storage_name}, #{store_id},
		#{storage_theme},
		#{media_id})
	</insert>

	<insert id="AddStorageItem" parameterType="com.portale.model.ItemObject" useGeneratedKeys="true" keyProperty="product.product_id">
		insert into
		storage_items(item_storage_ref,
		item_name,
		item_description,
		item_tags,
		item_unit_price,
		item_storaged,
		item_shipment_included,
		item_quality,
		item_quantity,
		item_creation_timestamp,
		item_type)
		values
		(#{storage_id},
		#{item_name},
		#{item_description},
		#{item_category},
		#{unit_price},
		#{storaged},
		#{shipment_included},
		#{quality},
		#{quantity},
		#{pubblication_date},
		#{type})
	</insert>

	<insert id="SetItemImage">
		insert into media_linked
		(link_media, link_reference)
		values
		(${media_id}, ${item_id})
	</insert>

	<select id="GetItemImages" resultType="java.lang.Long">
		select distinct
		ml.link_media as media_id from media_linked ml
		where ml.link_reference
		= #{item_id}
	</select>

	<update id="SetPreferredItemImage">
		update storage_items
		<set>
			preview_media = #{media_id}
		</set>
		where item_id = #{item_id}
	</update>

	<update id="UpdateSotreProductDetails">
		update storage_items
		<set>
			<if test="item_name != null">item_name = #{item_name},</if>
			<if test="item_description != null">item_description = #{item_description},</if>
			<if test="item_category != null">item_tags = #{item_category},</if>
			<if test="unit_price != null">item_unit_price = #{unit_price},</if>
			<if test="storaged != null">item_storaged = #{storaged},</if>
			<if test="shipment_included != null">item_shipment_included = #{shipment_included},</if>
			<if test="quality != null">item_quality = #{quality},</if>
			<if test="quantity != null">item_quantity = #{quantity},</if>
			<if test="pubblication_date != null">item_creation_timestamp = #{pubblication_date},</if>
			item_preview_media = #{preview_media}
		</set>
		where item_id = #{product_id}
	</update>

	<update id="UpdateStorage">
		update storage
		<set>
			<if test="storageName != null">storage_name = #{storageName},</if>
			<if test="storage_media != 0">
				<if test="storage_media != null">storage_media = #{storage_media},</if>
				<if test="storage_media == null">storage_media = null,</if>
			</if>
			<if test="storage_theme != null">storage_theme = #{storage_theme},</if>
		</set>
		where storage_id = #{storageId}
	</update>

	<update id="UpdateStore">
		update store
		<set>
			<if test="store_name != null">store_name = #{store_name},</if>
			<if test="store_owner != 0">store_owner = #{store_owner},</if>
			<if test="media_id != 0">
				<if test="media_id != null">store_media = #{media_id},</if>
				<if test="media_id == null">store_media = null,</if>
			</if>
			<if test="open != null">store_open = #{open},</if>
			<if test="category != null">store_tags = #{category},</if>
			<if test="creation != null">store_creation_date = #{creation},</if>
			store_valid_until = #{valid_until},
			<if test="themeId != 0">store_theme = #{themeId}</if>
			<if test="confirmed != null">store_confirmed = #{confirmed},</if>
		</set>
		where store_id = #{storeId}
	</update>

	<delete id="RemoveItemImage">
		delete from media_linked where
		link_media =
		#{media_id}
		and link_reference = #{item_id}
	</delete>
	<delete id="DeleteStore">
		delete from store where store.store_id =
		#{storeId};
	</delete>
	<delete id="DeleteStorage">
		delete from storage where storage.storage_id =
		#{storageId};
	</delete>
	<delete id="DeleteItem">
		delete from storage_items where storage_items.item_id
		= #{itemId};
	</delete>
	<resultMap id="StoreObjectResultMap" type="StoreObject">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="category" column="category" />
		<result property="store_place" column="store_place" />
		<result property="place_expire" column="place_expire" />
		<result property="items_type" column="items_type" />
		<result property="items_type_desc" column="item_type_desc" />
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
		<collection property="Storage" resultMap="StorageObjectABC" />
	</resultMap>

	<resultMap type="StorageObject" id="StorageObjectABC">
		<id property="storage_id" column="storage_id" />
	</resultMap>

	<resultMap id="StorageItemsResultMap" type="StorageObject">
		<id property="storage_id" column="storage_id" />
		<result property="store_ref" column="storage_store_ref" />
		<result property="storage_name" column="storage_name" />
		<result property="ref_store_name" column="store_name" />
		<result property="store_items_type" column="store_items_type" />
		<result property="store_items_type_desc" column="item_type_desc" />		
		<association property="theme" javaType="ThemeObject">
		<id property="themeId" column="storage_theme" />
		</association>
		<association property="storage_media" javaType="MediaObject">
			<id property="media_id" column="storage_media_id" />
			<result property="media_name" column="storage_media_name" />
			<result property="media_path" column="storage_media_path" />
			<result property="media_owner" column="storage_media_owner" />
			<result property="media_pubblication_date" column="storage_media_pubblication_date" />
		</association>
		<collection property="items" resultMap="ItemsResultMap" />
	</resultMap>

	<resultMap type="ItemObject" id="ItemsResultMap">
		<id property="product_id" column="item_id" />
		<result property="storage_ref" column="item_storage_ref" />
		<result property="storage_name" column="storage_name" />
		<result property="item_name" column="item_name" />
		<result property="item_description" column="item_description" />
		<result property="item_category" column="item_tags" />
		<result property="unit_price" column="item_unit_price" />
		<result property="storaged" column="item_storaged" />
		<result property="shipment_included" column="item_shipment_included" />
		<result property="quality" column="item_quality" />
		<result property="quantity" column="item_quantity" />
		<result property="pubblication_date" column="item_pubblication_date" />
		<result property="preview_media" column="item_preview_media" />
		<result property="type" column="item_type" />
		<collection property="item_media" resultMap="ItemImageResultMap" />
	</resultMap>

	<resultMap type="MediaObject" id="ItemImageResultMap">
		<id property="media_id" column="item_media_id" />
		<result property="media_name" column="item_media_name" />
		<result property="media_path" column="item_media_path" />
		<result property="media_owner" column="item_media_owner" />
		<result property="media_pubblication_date" column="item_media_pubblication_date" />
	</resultMap>

	<resultMap type="StoreObject" id="StoreWithProductsResultMap">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="store_depth" column="store_depth" />
		<result property="category" column="store_tags" />
		<result property="items_type" column="store_items_type" />
		<result property="items_type_desc" column="item_type_desc" />
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="store_theme" />
		</association>
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
		<collection resultMap="StorageItemsResultMap" property="Storage" />
	</resultMap>

	<resultMap id="StorageResultMap" type="StorageObject">
		<id property="storage_id" column="storage_id" />
		<result property="store_ref" column="store_ref" />
		<result property="storage_name" column="storage_name" />
		<result property="store_items_type" column="items_type" />
		<result property="store_items_type_desc" column="item_type_desc" />
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="theme_id" />
			<result property="themeName" column="theme_display_name" />
			<result property="themePreviewImage" column="theme_thumbnail_path" />
		</association>
		<association property="storage_media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
	</resultMap>

	<resultMap id="StoreManagerObjectResultMap" type="StoreObject">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="category" column="store_tags" />
		<result property="items_type" column="store_items_type" />
		<result property="items_type_desc" column="item_type_desc" />
		<result property="open" column="store_open" />
		<result property="confirmed" column="store_confirmed" />
		<result property="creation" column="store_creation_date" />
		<result property="valid_until" column="store_valid_until" />
		<result property="store_owner" column="store_owner" />
		<result property="owner_name" column="ud_nome" />
		<result property="owner_surname" column="ud_cognome" />
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
	</resultMap>

	<resultMap id="StoreInfoResultMap" type="StoreObject">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="store_owner" column="store_owner" />
		<result property="owner_name" column="ud_nome" />
		<result property="owner_surname" column="ud_cognome" />
		<result property="open" column="store_open" />
		<result property="category" column="store_tags" />
		<result property="creation" column="store_creation_date" />
		<result property="valid_until" column="store_valid_until" />
		<result property="confirmed" column="store_confirmed" />
		<result property="store_depth" column="store_depth" />
		<result property="items_type" column="items_type" />
		<result property="items_type_desc" column="item_type_desc" />
		<result property="store_place" column="store_place" />
		<result property="place_expire" column="store_place_expire" />
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="theme_id" />
			<result property="themeName" column="theme_display_name" />
			<result property="themePreviewImage" column="theme_thumbnail_path" />
			<result property="depth" column="theme_depth" />
		</association>
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
		<collection property="Storage" resultMap="StorageIdResultMap" />
	</resultMap>

	<resultMap id="StorageIdResultMap" type="StorageObject">
		<id property="storage_id" column="storage_id" />
		<result property="store_ref" column="store_ref" />
		<result property="storage_name" column="storage_name" />
		<result property="store_items_type" column="items_type" />
		<result property="store_items_type_desc" column="item_type_desc" />
		<association property="storage_media" javaType="MediaObject">
			<id property="media_id" column="storage_media_id" />
			<result property="media_name" column="storage_media_name" />
			<result property="media_path" column="storage_media_path" />
			<result property="media_owner" column="storage_media_owner" />
			<result property="media_pubblication_date" column="storage_media_pubblication_date" />
		</association>
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="storage_themeId" />
			<result property="themeName" column="storage_themeName" />
			<result property="themePreviewImage" column="storage_themePreviewImage" />
		</association>
	</resultMap>

	<resultMap id="StoreThemesResultMap" type="ThemeObject">
		<id property="themeId" column="theme_id" />
		<result property="themeName" column="theme_display_name" />
		<result property="themePreviewImage" column="theme_thumbnail_path" />
		<result property="depth" column="theme_depth" />
	</resultMap>
</mapper>
   