<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.portale.mapper.MediaMapper">
	
	<resultMap type="MediaFolderObj" id="UserMediaFolderListResultMap">
		<id property="media_folder_id" column="mf_id"/>
		<result property="media_folder_reference" column="mf_ref"/>
		<result property="media_folder_name" column="mf_name"/>
		<result property="media_folder_owner" column="mf_owner"/>
		<result property="media_folder_color" column="mf_color"/>
	</resultMap>
	
	<resultMap id="UserMediaListResultMap" type="MediaObject">
		<id property="media_id" column="media_id" />
		<result property="media_name" column="media_name" />
		<result property="media_path" column="media_path" />
		<result property="media_owner" column="media_owner" />
		<result property="media_pubblication_date" column="media_pubblication_date" />
		<result property="media_size" column="media_size" />
	</resultMap>
	
	
	<select id="GetUserMediaFolderList" resultMap="UserMediaFolderListResultMap">
		select media_folder.* from media_folder
		where media_folder.mf_owner = #{id}
		<choose>
		<when test="media_folder_ref != -1">
			and media_folder.mf_ref = #{media_folder_ref}
		</when>
		<otherwise>
			and media_folder.mf_ref = (select mf_id from media_folder where mf_owner = #{id} and mf_ref is null)
		</otherwise>
		</choose>
		order by mf_id
		desc
	</select>

	<select id="GetAllSubFoldersByParentId" resultMap="UserMediaFolderListResultMap">
		WITH RECURSIVE a AS (
		SELECT mf_id, mf_ref, mf_name, mf_owner, mf_color
		FROM media_folder
		WHERE mf_owner = #{mf_owner}
		AND mf_ref = #{mf_ref}
		UNION ALL
		SELECT d.mf_id, d.mf_ref, d.mf_name, d.mf_owner, d.mf_color
		FROM media_folder d
		JOIN a ON a.mf_id = d.mf_ref )
		SELECT * FROM a;
	</select>
	
	<select id="GetUserMediaList" resultMap="UserMediaListResultMap">
		select media_id, media_name,
		(CASE
		WHEN media_hasthumbnail = true THEN
		CONCAT(media_path,'_thumb',media_extension)
		ELSE
		CONCAT(media_path,media_extension)
		END) as media_path,
		media_owner, media_pubblication_date
		from media
		where media_owner = #{id}
		<choose>
		<when test="media_folder_ref != -1">
			and media_folder_ref = #{media_folder_ref}
		</when>
		<otherwise>
			and media_folder_ref = (select mf_id from media_folder where mf_owner = #{id} and mf_ref is null)
		</otherwise>
		</choose>
		order by media_id
		desc
	</select>
	
	<resultMap type="UsedMediaStructureObj" id="usedMedias">
		<id property="media_id" column="media_id"/>
		<result property="media_name" column="media_name"/>
		<result property="media_path" column="media_path"/>
		<result property="folder_tree" column="folder_tree"/>
		<result property="mf_owner" column="mf_owner"/>
		<result property="item_preview_media" column="item_preview_media"/>
		<result property="storage_media" column="storage_media"/>
		<result property="store_media" column="store_media"/>
	</resultMap>

	<select id="CheckForUsedMediaById" resultMap="usedMedias">
		SELECT m.media_id, m.media_name,
		(CASE
		WHEN m.media_hasthumbnail = true THEN
		CONCAT(m.media_path,'_thumb',m.media_extension)
		ELSE
		CONCAT(m.media_path,m.media_extension)
		END) AS media_path,
		f.*,
		CASE
		WHEN m.media_id = (SELECT item_preview_media FROM storage_items
		WHERE item_preview_media = CAST(#{media_id} AS INTEGER) limit 1) THEN
		(SELECT array_agg((SELECT item_type_desc from item_type where item_type_id = item_type) || '|' || item_id || '|' || item_name || '|' || storage_id || '|' || storage_name || '|' || store_id || '|' || store_name) FROM storage_items INNER
		JOIN storage ON storage_id = item_storage_ref INNER JOIN store ON store_id = storage_store_ref WHERE item_preview_media = CAST(#{media_id} AS INTEGER))
		END AS item_preview_media,
		CASE
		WHEN m.media_id = (select storage_media from storage
		where storage_media = CAST(#{media_id} AS INTEGER) limit 1) THEN
		(select array_agg(storage_id || '|' || storage_name || '|' || store_id || '|' || store_name) FROM storage INNER JOIN store ON store_id = storage_store_ref
		WHERE storage_media = CAST(#{media_id} AS INTEGER))
		END AS storage_media,
		CASE
		WHEN m.media_id = (select store_media from store
		WHERE store_media = CAST(#{media_id} AS INTEGER) limit 1) THEN
		(SELECT array_agg(store_id || '|' || store_name) FROM store WHERE store_media = CAST(#{media_id} AS INTEGER))
		END AS store_media
		FROM media m
		INNER JOIN 
		(
		WITH RECURSIVE a AS (
		SELECT mf_id, mf_ref, mf_owner, mf_name
		FROM media_folder
		WHERE mf_id = (SELECT media_folder_ref FROM media WHERE media_id = CAST(#{media_id} AS INTEGER))
		UNION ALL
		SELECT d.mf_id, d.mf_ref, d.mf_owner, d.mf_name
		FROM media_folder d
		JOIN a ON a.mf_ref = d.mf_id )
		SELECT jsonb_object_agg(mf_id,mf_name)  as folder_tree, mf_owner FROM a group by mf_owner
		) f ON f.mf_owner = m.media_owner 
		WHERE m.media_id = CAST(#{media_id} AS INTEGER)
	</select>
	
	<!-- Verifica se il file gia esiste -->
	<select id="CheckIfMediaExist" resultType="java.lang.Boolean">
		SELECT
		CASE WHEN EXISTS
		(SELECT media_id FROM media WHERE media.media_owner = #{media_owner}
		and
		media.media_path = #{media_path})
		THEN true
		ELSE false
		END AS exist
	</select>

	<select id="GetPathIfMediaExistById" resultMap="UserMediaListResultMap">
		SELECT * FROM media WHERE media.media_owner =
		#{media_owner} 
		and
		media.media_id = CAST(#{media_id} AS INTEGER)
	</select>

	<delete id="DeleteMediaById">
		DELETE FROM media
		WHERE media_owner = #{ownerId}
		AND media.media_id = ${media_id}
	</delete>
	
	<select id="DeleteFolderById">
		DELETE FROM media_folder
		WHERE mf_owner = #{ownerId}
		AND mf_id = ${folder_id}
	</select>

	<insert id="PostUsersMedia" parameterType="MediaObject" useGeneratedKeys="true" keyProperty="media.media_id" keyColumn="media_id">
		insert into
		media(media_name,
		media_path, media_owner,
		media_pubblication_date, media_hasthumbnail, media_extension, media_size_byte, media_folder_ref)
		values
		(#{media_name},#{media_path},#{media_owner},#{media_pubblication_date},#{media_hasthumbnail}, #{media_extension}, #{media_size},
		<choose>
			<when test="media_folder_ref == -1">
			(select mf_id from media_folder where mf_owner = #{media_owner} and mf_ref is null)
			</when>
			<otherwise>#{media_folder_ref}</otherwise>
		</choose>);
	</insert>
	
	<insert id="CreateMediaFolder">
		insert into media_folder (mf_ref, mf_name, mf_owner)
		values (
		<choose>
			<when test="folder_ref == -1">
			(select mf_id from media_folder where mf_owner = #{folder_owner} and mf_ref is null)
			</when>
			<otherwise>#{folder_ref}</otherwise>
		</choose>
		,#{folder_name},#{folder_owner}) 
	</insert>
	
	<sql id="renameFolder">
		UPDATE media_folder
		set mf_name = #{elementName}
		where mf_owner = #{ownerId}
		and mf_id = CAST(#{elementId} AS INTEGER)
	</sql>
	<sql id="renameMedia">
		UPDATE media
		set media_name = #{elementName}
		where media_owner = #{ownerId}
		and media_id = CAST(#{elementId} AS INTEGER)
	</sql>
	<update id="RenameElement">
		<if test="elementType == 1"><include refid="renameFolder"/></if>
		<if test="elementType == 0"><include refid="renameMedia"/></if>
	</update>
	
	
	<sql id="deleteFolder">
		DELETE FROM media_folder
		where mf_owner = #{ownerId}
		and mf_id = CAST(#{elementId} AS INTEGER)
	</sql>
	
	<sql id="deleteMedia">
		DELETE FROM media
		where media_owner = #{ownerId}
		and media_id = CAST(#{elementId} AS INTEGER)
	</sql>
	
	<delete id="DeleteElement">
		<if test="elementType == 1"><include refid="deleteFolder"/></if>
		<if test="elementType == 0"><include refid="deleteMedia"/></if>
	</delete>

	<delete id="DeleteFolders">
		DELETE FROM media_folder
		WHERE mf_owner = #{ownerId}
		AND mf_id IN
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<delete id="DeleteMedias">
		DELETE FROM media
		WHERE media_owner = #{ownerId}
		AND media_id IN
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>
	
</mapper>