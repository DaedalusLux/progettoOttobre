<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.portale.mapper.StoreMapper">

	<!-- Seleziona il numero di negozi Indicando l'id del utente ritorna il numori di negozi appartenente a quel utente -->
	<select id="GetStoresCount" resultType="java.lang.Long">
		select distinct count(*) over ()
		from stores
		left join users_details ud
		on
		stores.store_owner =
		ud.user_ref
		<if test="search != null">
			where (store_name ilike #{search}
			or nome ilike #{search}
			or cognome
			ilike #{search}
			or category ilike #{search})
			<if test="store_owner != 0">and stores.store_owner = #{store_owner} or
				stores.store_owner = 3
			</if>
		</if>
		<if test="store_owner != 0">where stores.store_owner = #{store_owner} or
			stores.store_owner = 3
		</if>
	</select>





	<!-- Seleziona il numero di oggetti che si trovano dentro uno storage -->
	<select id="GetStorageItemsCount" resultType="java.lang.Long">
		select distinct
		count(item_id) from storage_items
		where storage_ref =
		#{storageId}
		<if test="search != null">
			and (name ilike #{search}
			or description ilike #{search}
			or
			category ilike #{search})
		</if>
	</select>

	<select id="GetPublicStorageItemsCount" resultType="java.lang.Long">
		select
		count(item_id) from storage_items
		where storage_ref =
		#{storageId}

	</select>

	<!-- Verifica se il negozio e' stato confermato -->
	<select id="isStoreConfirmed" resultType="java.lang.Boolean">
		select s.confirmed
		from
		stores s
		where s.store_id = #{storeId}
	</select>

	<!-- Seleziona il nome di tutte le categorie dei negozi (ESEMPIO: Negozio che vende vestiti >> Abbigliamento) -->
	<select id="GetStoreCategoriesList" resultType="string">
		select distinct
		s.category from stores s where category is not NULL
	</select>

	<!-- Seleziona ogni tema -->
	<select id="GetThemesData" resultMap="StoreThemesResultMap">
		select * from themes
		order
		by theme_id
	</select>

	<!-- seleziona i negozi confermati che hanno almeno un prodotto e (senza data di scadenza o con la data di scadenza valida) -->
	<select id="GetStoreData" resultMap="StoreObjectResultMap">
		select distinct st.store_id,
		st.category, st.store_name,
		strg.storage_id, m.*
		,st.store_place,
		st.place_expire
		from stores
		st
		left
		join
		(
		select
		distinct
		on
		(storage.storage_id)
		* from storage,
		stores
		where
		storage.store_ref =
		stores.store_id
		and stores.store_depth
		= 0
		) as strg
		on strg.store_ref =
		st.store_id
		left join media m
		on m.media_id =
		st.store_media
		join (select
		storage.store_ref,
		count(storage_items.item_id) from storage,
		storage_items
		where
		storage_items.storage_ref = storage.storage_id
		<!-- and storage_items.avability = true -->
		GROUP BY storage.storage_id,
		storage_items.item_id
		HAVING
		storage_items.item_id > 1 ) as
		storage_having_prod
		on
		storage_having_prod.store_ref =
		st.store_id
		where
		st.open
		= true
		and
		st.confirmed = true
		and
		(st.valid_until is null or
		st.valid_until >
		current_date)
		and
		storage_having_prod.store_ref =
		st.store_id
		order by
		store_place, st.store_id desc
	</select>

	<!-- seleziona un prodotto a caso dal negozio tuttocitta (scegle i prodotti che hanno inpostato l'immagine preferita) -->
	<select id="GetRandomItemTC" resultMap="RandomItemTCResultMap">
		select distinct RANDOM(),
		m.*, si.item_id, si.storage_ref from media m,
		stores s, storage_items
		si
		where m.media_id =
		si.preview_media
		<!-- and (si.storage_ref != 65) and (si.storage_ref != 8) and si.avability = true -->
		and si.quantity > 0 or
		si.quantity is null

		and si.storage_ref =
		s.store_id
		and s.store_id = 3

		ORDER BY RANDOM ()
		LIMIT 1
	</select>

	<resultMap type="ItemAds" id="RandomItemTCResultMap">
		<id property="item_id" column="item_id" />
		<result property="storage_ref" column="storage_ref" />
		<association property="item_media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
	</resultMap>

	<select id="GetStorageItems" resultMap="StorageItemsResultMap">
		select store_dett.store_name, store_dett.items_type, s_it.*, st.*,

		item_pref.media_id as item_media_id,
		item_pref.media_name as item_media_name,
		item_pref.media_path as
		item_media_path,
		item_pref.media_owner as item_media_owner,
		item_pref.media_pubblication_date as item_media_pubblication_date,

		strg_media.media_id as storage_media_id,
		strg_media.media_name as
		storage_media_name,
		strg_media.media_path as storage_media_path,
		strg_media.media_owner as storage_media_owner,
		strg_media.media_pubblication_date as
		storage_media_pubblication_date

		from storage_items s_it
		left join
		storage st
		on s_it.storage_ref =
		st.storage_id

		LEFT JOIN media strg_media
		ON
		strg_media.media_id =
		st.storage_media

		left join (select ml.link_reference,
		max(ml.link_media) as link_media from
		storage_items si, media_linked ml
		where si.item_id = ml.link_reference group
		by link_reference)as ml
		on
		ml.link_reference = s_it.item_id

		left join
		media
		item_pref
		on (CASE
		WHEN
		s_it.preview_media IS NOT NULL THEN
		item_pref.media_id =
		s_it.preview_media
		WHEN s_it.preview_media IS NULL THEN
		item_pref.media_id = ml.link_media
		END)
		inner join (select stores.store_name, stores.store_id, stores.items_type from stores) store_dett
		on store_dett.store_id = st.store_ref
		where
		st.storage_id =
		#{storageId}
		<if test="search != null">
			and (s_it.name ilike #{search}
			or s_it.description ilike
			#{search}
			or s_it.category ilike #{search})
		</if>
		order by s_it.item_id desc
		limit
		#{limit}
		offset
		#{offset}
	</select>

	<select id="GetStoreProductsManager" resultMap="StorageItemsResultMap">
		select us.store_name, us.items_type, s_it.*, st.*,
		item_pref.media_id as item_media_id,
		item_pref.media_name as
		item_media_name,
		item_pref.media_path as
		item_media_path,
		item_pref.media_owner as item_media_owner,
		item_pref.media_pubblication_date as
		item_media_pubblication_date,

		strg_media.media_id as storage_media_id,
		strg_media.media_name as
		storage_media_name,
		strg_media.media_path as
		storage_media_path,
		strg_media.media_owner as storage_media_owner,
		strg_media.media_pubblication_date as storage_media_pubblication_date

		from stores
		us, storage_items s_it
		left join
		storage st
		on
		s_it.storage_ref =
		st.storage_id

		LEFT JOIN media strg_media
		ON
		strg_media.media_id =
		st.storage_media

		left join
		(select
		ml.link_reference, max(ml.link_media) as link_media from storage_items
		si, media_linked ml where si.item_id = ml.link_reference group by
		link_reference)as ml
		on ml.link_reference = s_it.item_id

		left join media
		item_pref
		on (CASE
		WHEN
		s_it.preview_media IS NOT NULL THEN
		item_pref.media_id =
		s_it.preview_media
		WHEN s_it.preview_media IS NULL
		THEN
		item_pref.media_id = ml.link_media
		END)
		where
		st.store_ref =
		us.store_id

		and us.store_id =
		#{storeId}
		order by item_id desc,
		storage_id desc
		limit #{limit}
		offset
		#{offset}
	</select>

	<select id="GetStoreWithProducts" resultMap="StoreWithProductsResultMap">
		select s_m.*, us.*, s.*, i.*,
		st_m.media_id as
		storage_media_id,
		st_m.media_name as
		storage_media_name,
		st_m.media_path
		as
		storage_media_path,
		st_m.media_owner as storage_media_owner,
		st_m.media_pubblication_date
		as
		storage_media_pubblication_date,
		i_m.media_id as
		item_media_id,
		i_m.media_name as item_media_name,
		i_m.media_path as item_media_path,
		i_m.media_owner as
		item_media_owner,
		i_m.media_pubblication_date as
		item_media_pubblication_date
		from stores
		us
		left join storage s
		on
		s.store_ref = us.store_id
		left join
		storage_items i
		on i.storage_ref =
		s.storage_id
		left
		join
		media s_m
		on
		s_m.media_id = us.store_media
		left
		join
		media st_m
		on st_m.media_id =
		s.storage_media
		left join
		media_linked
		ml
		on i.item_id =
		ml.link_reference
		left join
		media i_m
		on i_m.media_id =
		ml.link_media
		where us.store_id =
		#{storeId}
		<!-- and (i.quantity != 0) and i.avability = true -->
		order by
		storage_id
	</select>

	<select id="GetStorageeWithProducts" resultMap="StoreWithProductsResultMap">
		select s_m.*, us.*, s.*, i.*,
		st_m.media_id as
		storage_media_id,
		st_m.media_name as
		storage_media_name,
		st_m.media_path
		as
		storage_media_path,
		st_m.media_owner as storage_media_owner,
		st_m.media_pubblication_date
		as
		storage_media_pubblication_date,
		item_pref.media_id as
		item_media_id,
		item_pref.media_name as
		item_media_name,
		item_pref.media_path as
		item_media_path,
		item_pref.media_owner as
		item_media_owner,
		item_pref.media_pubblication_date as
		item_media_pubblication_date
		from
		stores us
		left join storage s
		on
		s.store_ref = us.store_id
		left join
		storage_items i
		on i.storage_ref =
		s.storage_id
		left join
		media s_m
		on
		s_m.media_id = us.store_media
		left
		join
		media st_m
		on st_m.media_id =
		s.storage_media

		left join (select
		ml.link_reference, max(ml.link_media)
		as link_media from storage_items si, media_linked ml where
		si.item_id =
		ml.link_reference group
		by
		link_reference)as ml
		on ml.link_reference =
		i.item_id

		left join media item_pref
		on (CASE
		WHEN
		i.preview_media IS
		NOT
		NULL THEN
		item_pref.media_id =
		i.preview_media
		WHEN i.preview_media IS
		NULL THEN
		item_pref.media_id = ml.link_media
		END)

		where us.store_id =
		s.store_ref
		and
		s.storage_id =
		#{storageId}
		<!-- and (i.quantity != 0) and i.avability = true -->
		order by
		item_id
		desc
		limit #{limit}
		offset #{offset}
	</select>

	<select id="GetStorageeWithAllProducts" resultMap="StoreWithProductsResultMap">
		select s_m.*, us.*, s.*, i.*,
		st_m.media_id as
		storage_media_id,
		st_m.media_name as
		storage_media_name,
		st_m.media_path
		as
		storage_media_path,
		st_m.media_owner as storage_media_owner,
		st_m.media_pubblication_date
		as
		storage_media_pubblication_date,
		item_pref.media_id as
		item_media_id,
		item_pref.media_name as
		item_media_name,
		item_pref.media_path as
		item_media_path,
		item_pref.media_owner as
		item_media_owner,
		item_pref.media_pubblication_date as
		item_media_pubblication_date
		from
		stores us
		left join storage s
		on
		s.store_ref = us.store_id
		left join
		storage_items i
		on i.storage_ref =
		s.storage_id
		left join
		media s_m
		on
		s_m.media_id = us.store_media
		left
		join
		media st_m
		on st_m.media_id =
		s.storage_media

		left join (select
		ml.link_reference, ml.link_media as
		link_media from storage_items si, media_linked ml where
		si.item_id =
		ml.link_reference)as ml
		on ml.link_reference =
		i.item_id

		left join media
		item_pref
		on item_pref.media_id = ml.link_media


		where us.store_id =
		s.store_ref
		and
		s.storage_id =
		#{storageId}
		<!-- and (i.quantity != 0) and i.avability = true -->
	</select>

	<select id="GetStoreProductinfo" resultMap="ItemsResultMap">
		select i.*,
		s.storage_name,
		m.media_id as
		item_media_id,
		m.media_name as
		item_media_name,
		m.media_path as
		item_media_path,
		m.media_owner as
		item_media_owner,
		m.media_pubblication_date as
		item_pubblication_date

		from stores us
		left join
		storage s
		on s.store_ref =
		us.store_id
		left join
		storage_items i
		on
		i.storage_ref = s.storage_id
		left join
		media_linked ml
		on ml.link_reference = i.item_id
		left join
		media m
		on m.media_id =
		ml.link_media

		where
		s.store_ref = us.store_id
		and i.item_id =
		#{product_id}
	</select>

	<select id="GetStorageInfo" resultMap="StorageResultMap">
		select * from
		themes,
		storage

		left join media
		on media.media_id = storage.storage_media
		where
		theme_id =
		storage_theme

		and storage_id = #{storageId}
	</select>

	<select id="GetStoreDataManager" resultMap="StoreManagerObjectResultMap">
		select distinct s.*, m.*, ud.nome, ud.cognome
		from stores s
		left join
		media m
		on m.media_id = s.store_media
		left join users_details ud
		on
		s.store_owner =
		ud.user_ref
		<if test="search != null">
			where (store_name ilike #{search}
			or nome ilike #{search}
			or cognome ilike #{search}
			or category ilike #{search})
		</if>
		order by store_id
		limit #{limit}
		offset
		#{offset}
		<!-- <if test="store_owner != 0">and s.store_owner = #{store_owner}</if> -->
	</select>

	<select id="GetStoreInfo" resultMap="StoreInfoResultMap">
		select s.*, m.*, t.* ,
		ud.nome, ud.cognome, st.*,
		storage_t.theme_id as storage_themeId,
		storage_t.display_name as storage_themeName,
		storage_t.thumbnail_path
		as storage_themePreviewImage,
		sm.media_id as storage_media_id,
		sm.media_name as
		storage_media_name,
		sm.media_path as
		storage_media_path,
		sm.media_owner as storage_media_owner,
		sm.media_pubblication_date as
		storage_media_pubblication_date
		from
		users_details
		ud,
		themes t
		left join
		stores
		s
		on
		s.theme =
		t.theme_id
		left join
		storage st
		on
		st.store_ref = s.store_id
		left
		join themes storage_t
		on
		storage_t.theme_id = st.storage_theme
		left join
		media m
		on m.media_id =
		s.store_media
		left join media sm
		on st.storage_media =
		sm.media_id
		where
		ud.user_ref =
		s.store_owner
		and
		s.store_id =
		#{store_id}
	</select>

	<insert id="AddNewStore" parameterType="com.portale.model.StoreObject" useGeneratedKeys="true" keyProperty="store.store_id">
		insert into stores(store_media,
		open, category,
		creation,
		valid_until, store_name, store_owner, theme, confirmed, store_depth, items_type)
		values
		(#{media_id}, #{open}, #{category}, #{creation},
		#{valid_until},
		#{store_name},
		#{store_owner}, #{themeId},
		#{confirmed},
		#{store_depth}, #{items_type})
	</insert>

	<insert id="AddStoreStorage" parameterType="com.portale.model.StorageObject" useGeneratedKeys="true" keyProperty="storage.storage_id">
		insert into
		storage(storage_name,
		store_ref, substorage_ref, storage_theme, storage_media)
		values
		(#{storage_name}, #{store_id}, #{substorage_ref},
		#{storage_theme},
		#{media_id})
	</insert>

	<insert id="AddStorageItem" parameterType="com.portale.model.ItemObject" useGeneratedKeys="true" keyProperty="product.product_id">
		insert into
		storage_items(storage_ref,
		item_name,
		item_description,
		item_category,
		unit_price,
		storaged,
		shipment_included,
		quality,
		quantity,
		pubblication_date,
		type)
		values
		(#{storage_id},
		#{item_name},
		#{item_description},
		#{item_category},
		#{unit_price},
		#{storaged},
		#{shipment_included},
		#{quality},
		#{quantity},
		#{pubblication_date},
		#{type})
	</insert>

	<insert id="SetItemImage">
		insert into media_linked
		(link_media, link_reference)
		values
		(${media_id}, ${item_id})
	</insert>

	<select id="GetItemImages" resultType="java.lang.Long">
		select distinct
		ml.link_media as media_id from media_linked ml
		where ml.link_reference
		= #{item_id}
	</select>

	<update id="SetPreferredItemImage">
		update storage_items
		<set>
			preview_media = #{media_id}
		</set>
		where item_id = #{item_id}
	</update>

	<update id="UpdateSotreProductDetails">
		update storage_items
		<set>
			<if test="item_name != null">item_name = #{item_name},</if>
			<if test="item_description != null">item_description = #{item_description},</if>
			<if test="item_category != null">item_category = #{item_category},</if>
			<if test="unit_price != null">unit_price = #{unit_price},</if>
			<if test="storaged != null">storaged = #{storaged},</if>
			<if test="shipment_included != null">shipment_included = #{shipment_included},</if>
			<if test="quality != null">quality = #{quality},</if>
			<if test="quantity != null">quantity = #{quantity},</if>
			<if test="preview_media != 0">
				<if test="preview_media == null">
					preview_media = null,
				</if>
				<if test="preview_media != null">
					preview_media = #{preview_media},
				</if>
			</if>
			<if test="pubblication_date != null">pubblication_date = #{pubblication_date},</if>
		</set>
		where item_id = #{product_id}
	</update>

	<update id="UpdateStorage">
		update storage
		<set>
			<if test="storageName != null">storage_name = #{storageName},</if>
			<if test="subStorage != null">substorage_ref = #{subStorage},</if>
			<if test="storage_media != 0">
				<if test="storage_media != null">storage_media = #{storage_media},</if>
				<if test="storage_media == null">storage_media = null,</if>
			</if>
			<if test="storage_theme != null">storage_theme = #{storage_theme},</if>
		</set>
		where storage_id = #{storageId}
	</update>

	<update id="UpdateStore">
		update stores
		<set>
			<if test="store_name != null">store_name = #{store_name},</if>
			<if test="store_owner != 0">store_owner = #{store_owner},</if>
			<if test="media_id != 0">
				<if test="media_id != null">store_media = #{media_id},</if>
				<if test="media_id == null">store_media = null,</if>
			</if>
			<if test="open != null">open = #{open},</if>
			<if test="category != null">category = #{category},</if>
			<if test="creation != null">creation = #{creation},</if>
			valid_until = #{valid_until},
			<if test="themeId != 0">theme = #{themeId}</if>
			<if test="confirmed != null">confirmed = #{confirmed},</if>
		</set>
		where store_id = #{storeId}
	</update>

	<delete id="RemoveItemImage">
		delete from media_linked where
		link_media =
		#{media_id}
		and link_reference = #{item_id}
	</delete>
	<delete id="DeleteStore">
		delete from stores where stores.store_id =
		#{storeId};
	</delete>
	<delete id="DeleteStorage">
		delete from storage where storage.storage_id =
		#{storageId};
	</delete>
	<delete id="DeleteItem">
		delete from storage_items where storage_items.item_id
		= #{itemId};
	</delete>
	<resultMap id="StoreObjectResultMap" type="StoreObject">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="banner_link" column="banner_link" />
		<result property="category" column="category" />
		<result property="store_place" column="store_place" />
		<result property="place_expire" column="place_expire" />
		<result property="items_type" column="items_type" />

		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
		<collection property="Storage" resultMap="StorageObjectABC" />
	</resultMap>

	<resultMap type="StorageObject" id="StorageObjectABC">
		<id property="storage_id" column="storage_id" />
	</resultMap>

	<resultMap id="StorageItemsResultMap" type="StorageObject">
		<id property="storage_id" column="storage_id" />
		<result property="store_ref" column="store_ref" />
		<result property="storage_name" column="storage_name" />
		<result property="ref_store_name" column="store_name" />
		<result property="store_items_type" column="items_type" />
		
		<association property="theme" javaType="ThemeObject">
		<id property="themeId" column="storage_theme" />
		</association>
		<association property="storage_media" javaType="MediaObject">
			<id property="media_id" column="storage_media_id" />
			<result property="media_name" column="storage_media_name" />
			<result property="media_path" column="storage_media_path" />
			<result property="media_owner" column="storage_media_owner" />
			<result property="media_pubblication_date" column="storage_media_pubblication_date" />
		</association>
		<collection property="items" resultMap="ItemsResultMap" />
	</resultMap>

	<resultMap type="ItemObject" id="ItemsResultMap">
		<id property="product_id" column="item_id" />
		<result property="storage_ref" column="storage_ref" />
		<result property="storage_name" column="storage_name" />
		<result property="item_name" column="item_name" />
		<result property="item_description" column="item_description" />
		<result property="item_category" column="item_category" />
		<result property="unit_price" column="unit_price" />
		<result property="storaged" column="storaged" />
		<result property="shipment_included" column="shipment_included" />
		<result property="quality" column="quality" />
		<result property="quantity" column="quantity" />
		<result property="pubblication_date" column="pubblication_date" />
		<result property="preview_media" column="preview_media" />
		<result property="type" column="type" />
		<collection property="item_media" resultMap="ItemImageResultMap" />
	</resultMap>

	<resultMap type="MediaObject" id="ItemImageResultMap">
		<id property="media_id" column="item_media_id" />
		<result property="media_name" column="item_media_name" />
		<result property="media_path" column="item_media_path" />
		<result property="media_owner" column="item_media_owner" />
		<result property="media_pubblication_date" column="item_media_pubblication_date" />
	</resultMap>

	<resultMap type="StoreObject" id="StoreWithProductsResultMap">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="banner_link" column="banner_link" />
		<result property="store_depth" column="store_depth" />
		<result property="category" column="category" />
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="theme" />
		</association>
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
		<collection resultMap="StorageItemsResultMap" property="Storage" />
	</resultMap>

	<resultMap id="StorageResultMap" type="StorageObject">
		<id property="storage_id" column="storage_id" />
		<result property="store_ref" column="store_ref" />
		<result property="storage_name" column="storage_name" />
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="storage_theme" />
			<result property="themeName" column="display_name" />
			<result property="themePreviewImage" column="thumbnail_path" />
		</association>
		<association property="storage_media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
	</resultMap>

	<resultMap id="StoreManagerObjectResultMap" type="StoreObject">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="category" column="category" />
		<result property="items_type" column="items_type" />
		<result property="open" column="open" />
		<result property="confirmed" column="confirmed" />
		<result property="creation" column="creation" />
		<result property="valid_until" column="valid_until" />
		<result property="store_owner" column="store_owner" />
		<result property="owner_name" column="nome" />
		<result property="owner_surname" column="cognome" />
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
	</resultMap>

	<resultMap id="StoreInfoResultMap" type="StoreObject">
		<id property="store_id" column="store_id" />
		<result property="store_name" column="store_name" />
		<result property="store_owner" column="store_owner" />
		<result property="owner_name" column="nome" />
		<result property="owner_surname" column="cognome" />
		<result property="banner_link" column="banner_link" />
		<result property="open" column="open" />
		<result property="category" column="category" />
		<result property="creation" column="creation" />
		<result property="valid_until" column="valid_until" />
		<result property="confirmed" column="confirmed" />
		<result property="store_depth" column="store_depth" />
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="theme_id" />
			<result property="themeName" column="display_name" />
			<result property="themePreviewImage" column="thumbnail_path" />
			<result property="depth" column="depth" />
		</association>
		<association property="media" javaType="MediaObject">
			<id property="media_id" column="media_id" />
			<result property="media_name" column="media_name" />
			<result property="media_path" column="media_path" />
			<result property="media_owner" column="media_owner" />
			<result property="media_pubblication_date" column="media_pubblication_date" />
		</association>
		<collection property="Storage" resultMap="StorageIdResultMap" />
	</resultMap>

	<resultMap id="StorageIdResultMap" type="StorageObject">
		<id property="storage_id" column="storage_id" />
		<result property="store_ref" column="store_ref" />
		<result property="storage_name" column="storage_name" />
		<association property="storage_media" javaType="MediaObject">
			<id property="media_id" column="storage_media_id" />
			<result property="media_name" column="storage_media_name" />
			<result property="media_path" column="storage_media_path" />
			<result property="media_owner" column="storage_media_owner" />
			<result property="media_pubblication_date" column="storage_media_pubblication_date" />
		</association>
		<association property="theme" javaType="ThemeObject">
			<id property="themeId" column="storage_themeId" />
			<result property="themeName" column="storage_themeName" />
			<result property="themePreviewImage" column="storage_themePreviewImage" />
		</association>
	</resultMap>

	<resultMap id="StoreThemesResultMap" type="ThemeObject">
		<id property="themeId" column="theme_id" />
		<result property="themeName" column="display_name" />
		<result property="themePreviewImage" column="thumbnail_path" />
		<result property="depth" column="depth" />
	</resultMap>
</mapper>
   